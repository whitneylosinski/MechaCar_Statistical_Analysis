?<name of function or object>
name of function or object
?<name of function or object>
<name of function or object>
install.packages("tidyverse")
install.packages("jsonlite")
setwd("C:/Users/whitn/Desktop/Data Analysis Bootcamp/Module 15/R_Analysis")
setwd("C:/Users/whitn/Desktop/Data Analysis Bootcamp/Module 15/R_Analysis/01_Demo")
x <- 3
x <- 5
numlist <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
> ?read.csv()
?read.csv()
demo_table <- read.csv(file='demo.csv', check.names=F, stringsAsFactors=F)
View(demo_table)
demo_table <- read.csv(file='demo.csv', check.names=F, stringsAsFactors=F)
library(jsonlite)
?fromJSON()
demo_table2 <- fromJSON(txt='demo.json')
View(demo_table2)
demo_table[3,"Year"]
demo_table[3,3]
demo_table$"Vehicle_Class"
demo_table$"Vehicle_Class"[2]
filter_table <- demo_table2[demo_table2$price > 10000,]
View(filter_table)
?subset()
View(demo_table2)
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status) #filter by price and drivetrain
View(filter_table2)
View(filter_table)
?sample()
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
demo_table[sample_rows,]
demo_table[sample(1:nrow(demo_table), 3),]
demo_table[sample(1:nrow(demo_table), 3),]
demo_table[sample(1:nrow(demo_table), 3),]
library(tidyverse)?mutate()
library(tidyverse)
?mutate()
demo_table <- demo_table %>% mutate(Mileage_per_Year=Total_Miles/(2020-Year),IsActive=TRUE) #add columns to original data frame
View(demo_table)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') #create summary table
View(summarize_demo)
View(demo_table2)
View(summarize_demo)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep') #create summary table with multiple columns
View(summarize_demo)
?gather()
demo_table3 <- read.csv('demo2.csv',check.names = F,stringsAsFactors = F)
View(demo_table3)
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
View(long_table)
View(demo_table3)
View(long_table)
View(demo_table3)
View(long_table)
View(demo_table3)
View(long_table)
long_table <- demo_table3 %>% gather(key="Metric",value="Score",buying_price:popularity)
View(long_table)
?spread()
wide_table <- long_table %>% spread(key="Metric",value="Score")
View(wide_table)
all.equal(demo_table3,wide_table)
wide_table2 <- wide_table[, order(colnames(wide_table))]
View(wide_table2)
?ggplot()
head(mpg)
plt <- ggplot(mpg,aes(x=class))
plt + geom_bar()
?geom_bar()
plt + geom_col() #plot a bar plot
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() #plot a bar plot
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") #plot bar plot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy))
View(mpg_summary)
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
plt + geom_line()
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + #plot a boxplot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
mpg_summary <- subset(mpg,manufacturer=="toyota") %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl,y=Mean_Hwy)) #import dataset into ggplot2
plt + geom_line()
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30)) #add line plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty)) #import dataset into ggplot2
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class)) #import dataset into ggplot2
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)", color="Vehicle Class") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class, shape=drv)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class", shape="Type of Drive") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class, shape=drv, size=cty)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class", shape="Type of Drive", size="City Fuel-Efficiency (MPG)") #add scatter plot with labels
plt <- ggplot(mpg,aes(y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() #add boxplot
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot(aes(color=drv), outlier.color="red", outlier.shape=1) + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy, color=drv)) #import dataset into ggplot2
plt + geom_boxplot(outlier.color="red", outlier.shape=1) + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot(outlier.color="red", outlier.shape=1, linetype=dashed) + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot(outlier.color="red", outlier.shape=1, linetype="dashed") + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy, color=manufacturer)) #import dataset into ggplot2
plt + geom_boxplot(outlier.color="red", outlier.shape=1, linetype="dashed") + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy, color=drv)) #import dataset into ggplot2
plt + geom_boxplot(outlier.color="red", outlier.shape=1, linetype="dashed") + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
#Heat Map
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)") #create heatmap with labels
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels
theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + #add boxplot
theme(axis.text.x=element_text(angle=45,hjust=1)) + #rotate x-axis labels 45 degrees
geom_point() #overlay scatter plot on top
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") #add scatter plot
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine)) #import dataset into ggplot2
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") + #add scatter plot
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine)) #overlay with error bars
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy)) #convert to long format
head(mpg_long)
View(mpg_summary)
View(plt)
View(mpg_summary)
View(mpg_long)
View(mpg_summary)
View(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot with labels rotated 45 degrees
?facet_wrap()
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=year)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(year)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=year)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(year + MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type)) #import dataset into ggplot2
plt + geom_boxplot() + facet_wrap(vars(year, MPG_Type)) + #create multiple boxplots, one for each MPG type
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer") #rotate x-axis labels
ggplot(mtcars,aes(x=wt)) + geom_density() #visualize distribution using density plot
?shapiro.test()
shapiro.test(mtcars$wt)
?sample_n()
clear()
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F) #import used car dataset
plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
sample_table <- population_table %>% sample_n(50) #randomly sample 50 data points
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
plt + geom_density() #visualize distribution using density plot
?t.test()
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven))) #compare sample versus population means
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven)) #compare means of two samples
mpg_data <- read.csv('mpg_modified.csv') #import dataset
mpg_1999 <- mpg_data %>% filter(year==1999) #select only data points where the year is 1999
mpg_2008 <- mpg_data %>% filter(year==2008) #select only data points where the year is 2008
t.test(mpg_1999$hwy,mpg_2008$hwy,paired = T) #compare the mean difference between two samples
?aov()
mtcars_filt <- mtcars[,c("hp","cyl")] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
aov(hp ~ cyl,data=mtcars_filt) #compare means across multiple levels
summary(aov(hp ~ cyl,data=mtcars_filt))
?cor()
head(mtcars)
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() #create scatter plot
cor(mtcars$hp,mtcars$qsec) #calculate correlation coefficient
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F) #read in dataset
head(used_cars)
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price)) #import dataset into ggplot2
plt + geom_point() #create a scatter plot
cor(used_cars$Miles_Driven,used_cars$Selling_Price) #calculate correlation coefficient
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")]) #convert data frame into numeric matrix
cor(used_matrix)
?lm()
lm(qsec ~ hp,mtcars) #create linear model
summary(lm(qsec~hp,mtcars)) #summarize linear model
model <- lm(qsec ~ hp,mtcars) #create linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)'] #determine y-axis values from linear model
plt <- ggplot(mtcars,aes(x=hp,y=qsec)) #import dataset into ggplot2
plt + geom_point() + geom_line(aes(y=yvals), color = "red") #plot scatter
# Multiple Linear Regression
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars) #generate multiple linear regression model
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)) #generate summary statistics
?chisq.test()
table(mpg$class,mpg$year) #generate contingency table
tbl <- table(mpg$class,mpg$year) #generate contingency table
chisq.test(tbl) #compare categorical distributions
setwd("C:/Users/whitn/Desktop/Data Analysis Bootcamp/Module 15/MechaCar_Statistical_Analysis")
library(dplyr)
read.csv(MechaCar_mpg.csv)
read.csv("MechaCar_mpg.csv")
?lm()
MechaCar_data <- read.csv("MechaCar_mpg.csv")
View(MechaCar_data)
View(MechaCar_data)
View(MechaCar_data)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, MechaCar_data)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, MechaCar_data))
# Read the data file
Suspension_data <- read.csv("Suspension_Coil.csv")
View(Suspension_data)
?summary()
# Create a summary dataframe
total_summary <- summary(Suspension_data(PSI))
# Create a summary dataframe
total_summary <- summary(Suspension_data("PSI"))
# Create a summary dataframe
total_summary <- summarize(Suspension_data(PSI))
?summarize()
total_summary <- Suspension_data %>% summarize(mean=mean(PSI), median=median(PSI), variance=variance(PSI), SD=sd(PSI))
# Create a summary dataframe
total_summary <- Suspension_data %>% summarize(mean=mean(PSI), median=median(PSI), variance=var(PSI), SD=sd(PSI))
View(total_summary)
View(Suspension_data)
# Create a summary dataframe for the PSI column
total_summary <- Suspension_data %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI))
View(total_summary)
View(total_summary)
View(Suspension_data)
lot_summary <- Suspension_data %>% group_by(Manufacturing_Lot) %>% simmarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI))
lot_summary <- Suspension_data %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI))
View(lot_summary)
View(MechaCar_data)
# Import the dplyr package
library(dplyr)
# Read the data file
MechaCar_mpg <- read.csv("MechaCar_mpg.csv")
# Perform linear regression
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, MechaCar_mpg)
# Get the summary of the linear regression
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, MechaCar_mpg))
# Analysis
# R-squared: 0.7149, p-value: 5.35e-11
# Intercept, vehicle length and ground clearance have a significant impact on mpg
# Statistically significant y-intercept means there are other factors contributing to variable mpg that weren't included in our model.
# Overfitting
# Read the data file
Suspension_Coil <- read.csv("Suspension_Coil.csv")
# Create a summary dataframe for the PSI column
total_summary <- Suspension_Coil %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI))
# Create a summary dataframe of the PSI column grouped by manufacturing lot
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI))
View(total_summary)
View(Suspension_Coil)
View(lot_summary)
View(MechaCar_mpg)
?t.test()
# Perform a t-Test of PSI per lot
sample_table <- Suspension_Coil %>% sample_n(50) #randomly sample 50 data points
t.test(sample_table$PSI,mu=mean(Suspension_Coil$PSI)) #compare sample versus population means
View(Suspension_Coil)
# Perform a t-Test of PSI for each lot
t.test(sample_table$PSI,mu=mean(Suspension_Coil$PSI), subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot1")) #compare sample versus population means for Lot 1
t.test(sample_table$PSI,mu=mean(Suspension_Coil$PSI), subset(Suspension_Coil$Manufacturing_Lot == "Lot1")) #compare sample versus population means for Lot 1
t.test(sample_table$PSI,mu=mean(Suspension_Coil$PSI), subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot1")) #compare sample versus population means for Lot 1
t.test(sample_table$PSI,mu=mean(Suspension_Coil$PSI), subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot1")) #compare sample versus population means for Lot 1
t.test(sample_table$PSI,mu=mean(Suspension_Coil$PSI), subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot2")) #compare sample versus population means for Lot 2
t.test(sample_table$PSI,mu=mean(Suspension_Coil$PSI), subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot3")) #compare sample versus population means for Lot 3
# Get the summary of the linear regression
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data=MechaCar_mpg))
MechaCar_mpg <- read.csv("MechaCar_mpg.csv")
# Perform linear regression
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, MechaCar_mpg)
# Get the summary of the linear regression
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, MechaCar_mpg))
t.test(sample_table$PSI,mu=mean(Suspension_Coil$PSI), subset(sample_table$PSI, Suspension_Coil$Manufacturing_Lot == "Lot1")) #compare sample versus population means for Lot 1
t.test(sample_table$PSI,mu=mean(Suspension_Coil$PSI), subset(sample_table$PSI, Suspension_Coil$Manufacturing_Lot == "Lot2")) #compare sample versus population means for Lot 2
t.test(sample_table$PSI,mu=mean(Suspension_Coil$PSI), subset(sample_table$PSI, Suspension_Coil$Manufacturing_Lot == "Lot3")) #compare sample versus population means for Lot 3
t.test(sample_table$PSI,mu=mean(Suspension_Coil$PSI), subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot1")) #compare sample versus population means for Lot 1
t.test(sample_table$PSI,mu=mean(Suspension_Coil$PSI), subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot2")) #compare sample versus population means for Lot 2
t.test(sample_table$PSI,mu=mean(Suspension_Coil$PSI), subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot3")) #compare sample versus population means for Lot 3
View(Suspension_Coil)
View(Suspension_Coil)
t.test(Lot1$PSI,Suspension_Coil$PSI,paired = T) #compare the mean difference between two samples
Lot1 <- Suspension_Coil %>% filter(Manufacturing_Lot==Lot1) #select only data points where the Manufacturing Lot is Lot1
Lot2 <- Suspension_Coil %>% filter(Manufacturing_Lot==Lot2) #select only data points where the Manufacturing Lot is Lot2
Lot3 <- Suspension_Coil %>% filter(Manufacturing_Lot==Lot3) #select only data points where the Manufacturing Lot is Lot3
t.test(Lot1$PSI,Suspension_Coil$PSI,paired = T) #compare the mean difference between two samples
t.test(Lot2$PSI,Suspension_Coil$PSI,paired = T) #compare the mean difference between two samples
t.test(Lot3$PSI,Suspension_Coil$PSI,paired = T) #compare the mean difference between two samples
Lot1 <- Suspension_Coil %>% filter(Manufacturing_Lot==Lot1) #select only
Lot1 <- Suspension_Coil %>% filter(Manufacturing_Lot=="Lot1") #select only data points where the Manufacturing Lot is Lot1
Lot2 <- Suspension_Coil %>% filter(Manufacturing_Lot=="Lot2") #select only data points where the Manufacturing Lot is Lot2
Lot3 <- Suspension_Coil %>% filter(Manufacturing_Lot=="Lot3") #select only data points where the Manufacturing Lot is Lot3
t.test(Lot1$PSI,Suspension_Coil$PSI,paired = T) #compare the mean difference between two samples
t.test(Lot2$PSI,Suspension_Coil$PSI,paired = T) #compare the mean difference between two samples
t.test(Lot3$PSI,Suspension_Coil$PSI,paired = T) #compare the mean difference between two samples
t.test(Lot1$PSI,sample_table$PSI,paired = T) #compare the mean difference between two samples
Lot1 <- Suspension_Coil %>% filter(Manufacturing_Lot=="Lot1") #select only data points where the Manufacturing Lot is Lot1
Lot2 <- Suspension_Coil %>% filter(Manufacturing_Lot=="Lot2") #select only data points where the Manufacturing Lot is Lot2
Lot3 <- Suspension_Coil %>% filter(Manufacturing_Lot=="Lot3") #select only data points where the Manufacturing Lot is Lot3
# Perform a t-Test of PSI for each lot
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot1")) #compare sample versus population means for Lot 1
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot2")) #compare sample versus population means for Lot 2
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot3")) #compare sample versus population means for Lot 3
# Import the dplyr package
library(dplyr)
# Read the data file
MechaCar_mpg <- read.csv("MechaCar_mpg.csv")
# Get the summary of a linear regression
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, MechaCar_mpg))
# Read the data file
Suspension_Coil <- read.csv("Suspension_Coil.csv")
# Create a summary dataframe for the PSI column
total_summary <- Suspension_Coil %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI))
# Create a summary dataframe of the PSI column grouped by manufacturing lot
lot_summary <- Suspension_Coil %>% group_by(Manufacturing_Lot) %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI))
# Perform a t-Test of PSI for all lots
sample_table <- Suspension_Coil %>% sample_n(50) #randomly sample 50 data points
t.test(sample_table$PSI,mu=mean(Suspension_Coil$PSI)) #compare sample versus population means
# Perform a t-Test of PSI for each lot
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot1")) #compare sample versus population means for Lot 1
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot2")) #compare sample versus population means for Lot 2
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot3")) #compare sample versus population means for Lot 3
View(lot_summary)
View(total_summary)
# Create a summary dataframe for the PSI column
total_summary <- Suspension_Coil %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), .groups='keep')
View(total_summary)
View(total_summary)
# Read the data file
Suspension_Coil <- read.csv(file='Suspension_Coil.csv',header=TRUE, sep=",", quote = "\"", dec =".")
# Create a summary dataframe for the PSI column
total_summary <- Suspension_Coil %>% summarize(Mean=mean(PSI), Median=median(PSI), Variance=var(PSI), SD=sd(PSI), .groups='keep')
View(total_summary)
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot1"), mu=mean(Suspension_Coil$PSI)) #compare sample versus populati
View(Suspension_Coil)
View(sample_table)
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot1"), mu=mean(Suspension_Coil$PSI)) #compare sample versus population means for Lot 1
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot2"), mu=mean(Suspension_Coil$PSI)) #compare sample versus population means for Lot 2
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot3"), mu=mean(Suspension_Coil$PSI)) #com
# Perform a t-Test of PSI for each lot
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot1"), mu=mean(Suspension_Coil$PSI)) #compare sample versus population means for Lot 1
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot2"), mu=mean(Suspension_Coil$PSI)) #compare sample versus population means for Lot 2
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot3"), mu=mean(Suspension_Coil$PSI)) #compare sample versus population means for Lot 3
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot1"), mu=mean(Suspension_Coil$PSI))
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot2"), mu=mean(Suspension_Coil$PSI))
t.test(subset(Suspension_Coil$PSI, Suspension_Coil$Manufacturing_Lot == "Lot3"), mu=mean(Suspension_Coil$PSI))
